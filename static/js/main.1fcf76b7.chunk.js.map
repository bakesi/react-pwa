{"version":3,"sources":["components/UserCard.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","_ref","user","loading","react_default","a","createElement","Card","Placeholder","Image","square","src","avatar","Content","Header","Line","length","Paragraph","react","first_name","last_name","Users","_React$useState","React","useState","_React$useState2","Object","slicedToArray","users","setUsers","useEffect","fetch","then","response","json","usersResponse","data","Segment","className","Container","text","as","icon","textAlign","Icon","name","circular","Group","doubling","itemsPerRow","stackable","Array","fill","map","ind","components_UserCard","key","concat","id","App","BrowserRouter","Route","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0VAoCeA,EAlCE,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,QACxB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGJ,EACCC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAYC,MAAb,CAAmBC,QAAM,KAG3BN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOE,IAAKT,EAAKU,SAGnBR,EAAAC,EAAAC,cAACC,EAAA,EAAKM,QAAN,KACGV,EACCC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAYM,OAAb,KACEV,EAAAC,EAAAC,cAACE,EAAA,EAAYO,KAAb,CAAkBC,OAAO,eACzBZ,EAAAC,EAAAC,cAACE,EAAA,EAAYO,KAAb,CAAkBC,OAAO,YAE3BZ,EAAAC,EAAAC,cAACE,EAAA,EAAYS,UAAb,KACEb,EAAAC,EAAAC,cAACE,EAAA,EAAYO,KAAb,CAAkBC,OAAO,YAI7BZ,EAAAC,EAAAC,cAACY,EAAA,SAAD,KACEd,EAAAC,EAAAC,cAACC,EAAA,EAAKO,OAAN,KACGZ,EAAKiB,WADR,IACqBjB,EAAKkB,eCcvBC,EArCD,WAAM,IAAAC,EACQC,IAAMC,SAAS,MADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACXM,EADWH,EAAA,GACJI,EADIJ,EAAA,GAWlB,OARAF,IAAMO,UAAU,WACdC,MAAM,+BAA+BC,KAAK,SAAAC,GACxCA,EAASC,OAAOF,KAAK,SAAAG,GACnBN,EAASM,EAAcC,WAG1B,IAGDhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASC,UAAU,eACjBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAWC,MAAI,GACbpC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQ2B,GAAG,KAAKC,MAAI,EAACC,UAAU,UAC7BvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAMC,KAAK,QAAQC,UAAQ,IAC3B1C,EAAAC,EAAAC,cAACQ,EAAA,EAAOD,QAAR,eAEFT,EAAAC,EAAAC,cAACC,EAAA,EAAKwC,MAAN,CAAYC,UAAQ,EAACC,YAAa,EAAGC,WAAS,IAC1CtB,GACA,IAAIuB,MAAM,GACPC,MAAK,GACLC,IAAI,SAAClD,EAASmD,GAAV,OACHlD,EAAAC,EAAAC,cAACiD,EAAD,CACEpD,QAASA,EACTD,MAAM,EACNsD,IAAG,WAAAC,OAAaH,SAGrB1B,GAASA,EAAMyB,IAAI,SAAAnD,GAAI,OAAIE,EAAAC,EAAAC,cAACiD,EAAD,CAAUrD,KAAMA,EAAMsD,IAAKtD,EAAKwD,WClBzDC,mLARX,OACEvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW1C,YAJjB2C,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.1fcf76b7.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Placeholder, Image, Card } from \"semantic-ui-react\";\nconst UserCard = ({ user, loading }) => {\n  return (\n    <Card>\n      {loading ? (\n        <Placeholder>\n          <Placeholder.Image square />\n        </Placeholder>\n      ) : (\n        <Image src={user.avatar} />\n      )}\n\n      <Card.Content>\n        {loading ? (\n          <Placeholder>\n            <Placeholder.Header>\n              <Placeholder.Line length=\"very short\" />\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"short\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        ) : (\n          <Fragment>\n            <Card.Header>\n              {user.first_name} {user.last_name}\n            </Card.Header>\n          </Fragment>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport { Container, Icon, Header, Segment, Card } from \"semantic-ui-react\";\nimport UserCard from \"../components/UserCard\";\n\nconst Users = () => {\n  const [users, setUsers] = React.useState(null);\n\n  React.useEffect(() => {\n    fetch(\"https://reqres.in/api/users\").then(response => {\n      response.json().then(usersResponse => {\n        setUsers(usersResponse.data);\n      });\n    });\n  }, []);\n\n  return (\n    <Segment className=\"full-height\">\n      <Container text>\n        <br />\n        <Header as=\"h2\" icon textAlign=\"center\">\n          <Icon name=\"users\" circular />\n          <Header.Content>Users</Header.Content>\n        </Header>\n        <Card.Group doubling itemsPerRow={3} stackable>\n          {!users &&\n            new Array(3)\n              .fill(true)\n              .map((loading, ind) => (\n                <UserCard\n                  loading={loading}\n                  user={false}\n                  key={`loading-${ind}`}\n                />\n              ))}\n          {!!users && users.map(user => <UserCard user={user} key={user.id} />)}\n        </Card.Group>\n      </Container>\n    </Segment>\n  );\n};\n\nexport default Users;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport Users from \"./pages/Users\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={Users} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}